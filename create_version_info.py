#! /bin/env python3

import subprocess, datetime
from pathlib import Path
import sys

if len(sys.argv) < 2:
    print("Usage: create_version_info.py <namespace_name>")
    sys.exit(1)

namespace_name = sys.argv[1]

try:
    git_version = (
        subprocess.check_output(["git", "describe", "--tags"]).strip().decode("utf-8")
    )
except subprocess.CalledProcessError:
    git_version = "v0.0.0-0-g0000000"

version = git_version

if version.startswith("v"):
    version = version[1:]

tokens = version.split("-")
tokens = tokens[0].split(".") + tokens[1:]

major = int(tokens[0])
minor = int(tokens[1])
patch = int(tokens[2])
commit_count = int(tokens[3]) if len(tokens) > 3 else 0
commit_hash = tokens[4] if len(tokens) > 4 else ""

version = f"{major}.{minor}.{patch}"
if commit_count > 0:
    version += f".{commit_count}"

build_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

Path("VersionInfo.cs").write_text(
    f"""// This file is auto-generated by get_version.py
namespace {namespace_name} {{
    public static class VersionInfo {{
        public const int Major = {major};
        public const int Minor = {minor};
        public const int Patch = {patch};
        public const int CommitCount = {commit_count};
        public const string CommitHash = "{commit_hash}";
        public const string Version = "{version}";
        public const string VersionGit = "{git_version}";
        public const string BuildTime = "{build_time}";
    }}
}}
"""
)

Path("version.txt").write_text(version)
Path("build_time.txt").write_text(build_time)

print(version)
